@page "/bets"
@using Blazored.Modal
@using Blazored.Modal.Services
@using Euro_2024_Management_System.Client.Components
@using Euro_2024_Management_System.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Linq

@attribute [Authorize]
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IModalService Modal

<h3 class="my-4 text-center">Twoje typy:</h3>

@if (Matches != null && Bets_ != null && Teams != null && User != null)
{
    <table class="table table-striped table-bordered table-hover">
        <thead class="thead-dark">
            <tr>
                <th class="text-center">Kolejka</th>
                <th class="text-center">Mecz</th>
                <th class="text-center">Rezultat</th>
                <th class="text-center">Obstaw mecz</th>
                <th class="text-center">Twój typ</th>
                <th class="text-center">Zdobyte punkty</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var match in Matches)
            {
                <tr>
                    <td class="align-middle text-center">@match.Round</td>
                    <td class="align-middle text-center">@($"{Teams.FirstOrDefault(t => t.Id == match.HomeTeamId)?.Name} - {Teams.FirstOrDefault(t => t.Id == match.AwayTeamId)?.Name}")</td>
                    <td class="align-middle text-center">@ReturnResult(match)</td>
                    <td class="align-middle text-center">
                        @if (!returnBet(match).IsApproved && match.IsFinished == false)
                        {
                            @if (returnBet(match) != null)
                            {
                                <EditForm Model="returnBet(match)" OnValidSubmit="() => HandleValidSubmit(returnBet(match))" class="form-inline">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="form-group mx-2">
                                        <label class="mr-2">Gole gospodarzy:</label>
                                        <InputNumber @bind-Value="returnBet(match).GoalsHome" class="form-control short-input" />
                                    </div>
                                    <div class="form-group mx-2">
                                        <label class="mr-2">Gole gości:</label>
                                        <InputNumber @bind-Value="returnBet(match).GoalsAway" class="form-control short-input" />
                                    </div>
                                    <div class="form-group mx-2">
                                        <label class="mr-2">Typ:</label>
                                        <InputSelect @bind-Value="returnBet(match).MatchBet" class="form-control short-input">
                                            <option value="1">1</option>
                                            <option value="2">2</option>
                                            <option value="0">0</option>
                                            <option value="12">12</option>
                                            <option value="10">10</option>
                                            <option value="20">02</option>
                                        </InputSelect>
                                    </div>
                                    <div class="form-group mx-2">
                                        <label class="mr-2">Ilość goli:</label>
                                        <InputNumber @bind-Value="returnBet(match).GoalsCount" class="form-control short-input" />
                                    </div>
                                    @if (returnBet(match).GoalsAway != null && returnBet(match).GoalsHome != null && returnBet(match).GoalsCount != null && returnBet(match).MatchBet != null)
                                    {
                                        <button type="submit" class="btn btn-success mt-2">Zatwierdź</button>
                                    }
                                    else
                                    {
                                        <p>Uzupełnij wszystkie pola</p>
                                    }
                                </EditForm>
                            }
                            else
                            {
                                <p>Brak zakładu dla tego meczu.</p>
                            }
                        }
                        else
                        {
                            if (match.IsFinished == true && returnBet(match).IsApproved == false)
                            {
                                <p>Nie obstawiłeś tego zakładu</p>
                            }
                            else if (match.IsFinished == false)
                            {
                                <button class="btn btn-primary" @onclick="()=>changeBetAgain(returnBet(match))">Obstaw jeszcze raz</button>
                            }
                            else
                            {
                                <p>Zakład rozliczony</p>
                            }
                        }
                    </td>
                    <td class="align-middle text-center">
                        <p>Typ: @returnBet(match).MatchBet</p>
                        <p>Wynik: @returnBet(match).GoalsHome:@returnBet(match).GoalsAway</p>
                        <p>Ilość goli: @returnBet(match).GoalsCount</p>
                    </td>
                    <th class="align-middle text-center">@(returnBet(match).PointsScored == null ? "-" : returnBet(match).PointsScored)</th>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Team[] Teams;
    private Match[] Matches;
    private Bet[] Bets_;
    private ApplicationUser User;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.FindFirst(c => c.Type == "sub")?.Value;
            Teams = await Http.GetFromJsonAsync<Team[]>("api/team");
            Matches = await Http.GetFromJsonAsync<Match[]>("api/match");
            Bets_ = await Http.GetFromJsonAsync<Bet[]>($"api/bet/user/{userId}");
            User = await Http.GetFromJsonAsync<ApplicationUser>($"api/user/{userId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error fetching data: " + ex.Message);
        }
    }

    private async Task changeBetAgain(Bet bet)
    {
        var response = await Http.PutAsJsonAsync($"api/bet/changeState/{bet.Id}", bet);

        if (response.IsSuccessStatusCode)
        {
            await RefreshData();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Błąd podczas aktualizacji zakładu");
        }
    }

    private string ReturnResult(Match match)
    {
        if (match.GoalsHome == null || match.GoalsAway == null)
            return "-";

        var homeTeam = Teams.FirstOrDefault(t => t.Id == match.HomeTeamId)?.Name;
        var awayTeam = Teams.FirstOrDefault(t => t.Id == match.AwayTeamId)?.Name;

        return match.GoalsHome == match.GoalsAway ? "REMIS" : (match.GoalsHome > match.GoalsAway ? $"{homeTeam.ToUpper()}" : $"{awayTeam.ToUpper()}");
    }

    private Bet returnBet(Match match)
    {
        var betToReturn = Bets_.FirstOrDefault(x => x.MatchId == match.Id && x.UserId == User.Id);
        return betToReturn ?? new Bet { MatchId = match.Id, UserId = User.Id };
    }

    private async Task HandleValidSubmit(Bet bet)
    {
        bet.BetDate = DateTime.Now;
        var response = await Http.PutAsJsonAsync($"api/bet/{bet.Id}", bet);
        if (response.IsSuccessStatusCode)
        {
            await RefreshData();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Błąd podczas aktualizacji zakładu");
        }
    }
}
